
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000991  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e5  00000000  00000000  00000bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000486  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  c4:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <init>:
#include <avr/io.h>

// Use PORTB because that is where the LED resides
void init()												// normal time steps = 256, 1/16^6= 16 us, time steps*16us*prescaler >= the value we are trying to achieve. Change time steps to achieve wanted number
{
	TCCR0A |= (1 << WGM01);								// Set the Timer Mode to CTC
  cc:	84 b5       	in	r24, 0x24	; 36
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);				// Set prescaler 1024 in order to achieve 10 ms and start timer
  d2:	85 b5       	in	r24, 0x25	; 37
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0x9B;										// Set value you want to count to (10 ms needs an N = 156.25 = 156 - 1 = 155 ) 
  d8:	8b e9       	ldi	r24, 0x9B	; 155
  da:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x00;										// Duty cycle increments from 0 to 100%
  dc:	18 bc       	out	0x28, r1	; 40
	
	DDRB |= (1 << 5);									// Set output
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << 7);									// Set input
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << 7);									// Pin B7 set high
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	08 95       	ret

000000f2 <main>:
}

int main(void)
{
	init();
  f2:	0e 94 66 00 	call	0xcc	; 0xcc <init>
	
	while(1)
	{
		if(OCR0B != 0x00)
  f6:	88 b5       	in	r24, 0x28	; 40
  f8:	88 23       	and	r24, r24
  fa:	19 f0       	breq	.+6      	; 0x102 <main+0x10>
		{
			PORTB |= (1 << 5);							// Turns on and keeps the LED on when incrementing or decrementing
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	85 b9       	out	0x05, r24	; 5
		}
		if(!(PINB & (1 << 7)) && (OCR0B < OCR0A))		// If the button is pushed and OCR0B hasnt equated to OCR0A, increment OCR0B. button pushed = 0 
 102:	1f 99       	sbic	0x03, 7	; 3
 104:	08 c0       	rjmp	.+16     	; 0x116 <main+0x24>
 106:	98 b5       	in	r25, 0x28	; 40
 108:	87 b5       	in	r24, 0x27	; 39
 10a:	98 17       	cp	r25, r24
 10c:	20 f4       	brcc	.+8      	; 0x116 <main+0x24>
		{
			++OCR0B;									// Increments LED
 10e:	88 b5       	in	r24, 0x28	; 40
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	88 bd       	out	0x28, r24	; 40
 114:	08 c0       	rjmp	.+16     	; 0x126 <main+0x34>
		}
		else if((PINB & (1 << 7)) && (OCR0B > 0))	// If buttons not pushed and OCR0B isnt zero, decrement OCR0B. button not pushed = 1
 116:	1f 9b       	sbis	0x03, 7	; 3
 118:	06 c0       	rjmp	.+12     	; 0x126 <main+0x34>
 11a:	88 b5       	in	r24, 0x28	; 40
 11c:	88 23       	and	r24, r24
 11e:	19 f0       	breq	.+6      	; 0x126 <main+0x34>
		{
			--OCR0B;									// Decrements LED
 120:	88 b5       	in	r24, 0x28	; 40
 122:	81 50       	subi	r24, 0x01	; 1
 124:	88 bd       	out	0x28, r24	; 40
		}
		
		while( (TIFR0 & (1 << OCF0B) ) == 0){}			// wait for OCR0B overflow event
 126:	aa 9b       	sbis	0x15, 2	; 21
 128:	fe cf       	rjmp	.-4      	; 0x126 <main+0x34>
		TIFR0 |= (1 << OCF0B);							// reset OCR0B overflow flag
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	85 bb       	out	0x15, r24	; 21
		PORTB &= ~(1 << 5);								// Turns off LED
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	85 b9       	out	0x05, r24	; 5
		while ((TIFR0 & (1 << OCF0A)) == 0){}			// Wait for the overflow event
 136:	a9 9b       	sbis	0x15, 1	; 21
 138:	fe cf       	rjmp	.-4      	; 0x136 <main+0x44>
		TIFR0 |= (1 << OCF0A);							// reset the overflow flag
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	85 bb       	out	0x15, r24	; 21
		
	}
 140:	da cf       	rjmp	.-76     	; 0xf6 <main+0x4>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
