
Lab 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b70  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009fd  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ce  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fa  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016e  00000000  00000000  000021f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e0       	ldi	r30, 0x02	; 2
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  da:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <uart_init>:

unsigned char keychar[4][4] = {{'1','2','3','A'}, {'4','5','6','B'}, {'7','8','9','B'}, {'*','0','#','D'}};
											
void uart_init()							// function to initialize UART
{
	UBRR0H  = (BAUDRATE>>8);				// shift the register right by 8 bits
  e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L  = BAUDRATE;						// set baud rate
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1<<TXEN0)|(1<<RXEN0);		// enable receiver and transmitter
  ec:	e1 ec       	ldi	r30, 0xC1	; 193
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00)|(1<<UCSZ01);		// 8bit data format
  f6:	e2 ec       	ldi	r30, 0xC2	; 194
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
	UCSR0C |= (0 << USBS0);					// stop bit
 100:	80 81       	ld	r24, Z
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <PortPin_init>:
}

void PortPin_init()
{
	DDRD |= (1<<4|1<<5|1<<6|1<<7);          // sets rows as output 
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	80 6f       	ori	r24, 0xF0	; 240
 10a:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<0|1<<1|1<<2|1<<3);         // sets column PB0 as input
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	84 b9       	out	0x04, r24	; 4

	PORTD |= (1<<4|1<<5|1<<6|1<<7);         // sets rows as high
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	80 6f       	ori	r24, 0xF0	; 240
 116:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<0|1<<1|1<<2|1<<3);			// set column as pull up
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	8f 60       	ori	r24, 0x0F	; 15
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	08 95       	ret

00000120 <UART_Tx>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	30 e7       	ldi	r19, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	21 50       	subi	r18, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <UART_Tx+0x6>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <UART_Tx+0x10>
 130:	00 00       	nop

// function to send data void
unsigned char UART_Tx(unsigned char data)
{
	_delay_ms(50);
	while(!(UCSR0A & (1 << UDRE0)));       // wait while register is free
 132:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 136:	95 ff       	sbrs	r25, 5
 138:	fc cf       	rjmp	.-8      	; 0x132 <UART_Tx+0x12>
	UDR0 = data;						   // load data in the register
 13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 13e:	08 95       	ret

00000140 <check>:

unsigned char check()
{
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
	unsigned char keypad;
	for (int i = 0; i < 4; ++i)
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	44 c0       	rjmp	.+136    	; 0x1da <check+0x9a>
	{
		PORTD &= ~(1<<(i+4));                   // Set row(k) low - one at a time (and check each column)
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	98 01       	movw	r18, r16
 156:	2c 5f       	subi	r18, 0xFC	; 252
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	7a 01       	movw	r14, r20
 160:	02 c0       	rjmp	.+4      	; 0x166 <check+0x26>
 162:	ee 0c       	add	r14, r14
 164:	ff 1c       	adc	r15, r15
 166:	2a 95       	dec	r18
 168:	e2 f7       	brpl	.-8      	; 0x162 <check+0x22>
 16a:	9e 2d       	mov	r25, r14
 16c:	90 95       	com	r25
 16e:	89 23       	and	r24, r25
 170:	8b b9       	out	0x0b, r24	; 11
		for(int j = 0; j < 4; ++j)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	29 c0       	rjmp	.+82     	; 0x1ca <check+0x8a>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <check+0x3e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <check+0x48>
 188:	00 00       	nop
		{
			while (!(PINB & (1 << j)))			// Check each column(j) to see which is pulled Low
			{
				_delay_ms(50);
				keypad = keychar[i][j];
 18a:	f8 01       	movw	r30, r16
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	ec 0f       	add	r30, r28
 19a:	fd 1f       	adc	r31, r29
				UART_Tx(keypad);
 19c:	80 81       	ld	r24, Z
 19e:	0e 94 90 00 	call	0x120	; 0x120 <UART_Tx>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	83 ec       	ldi	r24, 0xC3	; 195
 1a6:	99 e0       	ldi	r25, 0x09	; 9
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <check+0x68>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <check+0x72>
 1b2:	00 00       	nop
	for (int i = 0; i < 4; ++i)
	{
		PORTD &= ~(1<<(i+4));                   // Set row(k) low - one at a time (and check each column)
		for(int j = 0; j < 4; ++j)
		{
			while (!(PINB & (1 << j)))			// Check each column(j) to see which is pulled Low
 1b4:	83 b1       	in	r24, 0x03	; 3
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0c 2e       	mov	r0, r28
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <check+0x80>
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <check+0x7c>
 1c4:	80 ff       	sbrs	r24, 0
 1c6:	d8 cf       	rjmp	.-80     	; 0x178 <check+0x38>
{
	unsigned char keypad;
	for (int i = 0; i < 4; ++i)
	{
		PORTD &= ~(1<<(i+4));                   // Set row(k) low - one at a time (and check each column)
		for(int j = 0; j < 4; ++j)
 1c8:	21 96       	adiw	r28, 0x01	; 1
 1ca:	c4 30       	cpi	r28, 0x04	; 4
 1cc:	d1 05       	cpc	r29, r1
 1ce:	94 f3       	brlt	.-28     	; 0x1b4 <check+0x74>
				keypad = keychar[i][j];
				UART_Tx(keypad);
				_delay_ms(200);
			}
		}
		PORTD |= (1<<(i+4)); 					// Set row(i) high
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	e8 2a       	or	r14, r24
 1d4:	eb b8       	out	0x0b, r14	; 11
}

unsigned char check()
{
	unsigned char keypad;
	for (int i = 0; i < 4; ++i)
 1d6:	0f 5f       	subi	r16, 0xFF	; 255
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
 1da:	04 30       	cpi	r16, 0x04	; 4
 1dc:	11 05       	cpc	r17, r1
 1de:	0c f4       	brge	.+2      	; 0x1e2 <check+0xa2>
 1e0:	b8 cf       	rjmp	.-144    	; 0x152 <check+0x12>
				_delay_ms(200);
			}
		}
		PORTD |= (1<<(i+4)); 					// Set row(i) high
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <main>:

	
int main()
{
	uart_init();
 1f0:	0e 94 71 00 	call	0xe2	; 0xe2 <uart_init>
	PortPin_init();
 1f4:	0e 94 83 00 	call	0x106	; 0x106 <PortPin_init>

	while (1)
	{
		check();		
 1f8:	0e 94 a0 00 	call	0x140	; 0x140 <check>
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <main+0x8>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
